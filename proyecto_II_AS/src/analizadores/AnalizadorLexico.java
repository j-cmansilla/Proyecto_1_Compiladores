/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package analizadores;

import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\16\1\20\1\20\1\17\22\0\1\1\1\11\1\35"+
    "\2\0\1\6\1\12\1\0\1\53\1\54\1\5\1\6\1\55\1\77"+
    "\1\14\1\4\1\21\11\3\1\0\1\44\1\7\1\10\1\7\2\0"+
    "\1\24\1\25\1\26\1\26\1\27\1\26\1\75\1\2\1\71\2\2"+
    "\1\72\1\67\1\73\1\2\1\63\1\2\1\70\1\76\4\2\1\22"+
    "\2\2\1\45\1\36\1\46\1\0\1\2\1\0\1\30\1\31\1\32"+
    "\1\33\1\15\1\34\1\64\1\61\1\52\1\2\1\62\1\42\1\56"+
    "\1\50\1\47\1\57\1\2\1\40\1\43\1\37\1\41\1\51\1\60"+
    "\1\23\1\74\1\2\1\65\1\13\1\66\7\0\1\20\u1fa2\0\1\20"+
    "\1\20\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\2\1\1\11\1\3\1\2\1\4\4\3\1\1"+
    "\3\3\1\12\1\13\1\14\3\3\1\15\1\16\1\17"+
    "\2\3\1\20\1\21\5\3\1\22\1\23\1\0\1\24"+
    "\1\0\1\6\1\25\2\3\1\24\1\4\7\3\1\0"+
    "\1\26\1\0\4\3\1\27\2\3\1\30\11\3\1\0"+
    "\1\23\1\24\1\0\10\3\1\31\6\3\1\32\5\3"+
    "\1\33\2\3\1\23\1\3\1\34\1\3\1\35\3\3"+
    "\1\36\1\37\2\3\1\40\1\41\11\3\1\23\1\3"+
    "\1\42\1\43\1\44\5\3\1\45\1\46\7\3\1\47"+
    "\1\50\1\51\2\3\1\52\5\3\1\53\5\3\1\54"+
    "\1\55\3\3\1\56\1\57\1\60\2\3\1\61\1\3"+
    "\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\300\0\u0100\0\100\0\u0140"+
    "\0\u0140\0\u0140\0\u0180\0\u01c0\0\100\0\u0200\0\u0240\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480"+
    "\0\100\0\u04c0\0\100\0\u0500\0\u0540\0\u0580\0\100\0\100"+
    "\0\100\0\u05c0\0\u0600\0\100\0\100\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\100\0\u0780\0\u07c0\0\u0800\0\u0840\0\100"+
    "\0\100\0\u0880\0\u08c0\0\100\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u03c0\0\100\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\100\0\u0c40\0\u0c80\0\200\0\u0cc0"+
    "\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0240\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\200\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\200\0\u1600"+
    "\0\200\0\u1640\0\u1680\0\u16c0\0\200\0\200\0\u1700\0\u1740"+
    "\0\200\0\200\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\200\0\200\0\200"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\200\0\200\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\200\0\200"+
    "\0\200\0\u1d40\0\u1d80\0\200\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\200\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\200"+
    "\0\200\0\u2040\0\u2080\0\u20c0\0\200\0\200\0\200\0\u2100"+
    "\0\u2140\0\200\0\u2180\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\0"+
    "\1\20\7\4\1\21\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\2\4\1\30\1\31\1\32\1\33\1\4"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\4\1\42"+
    "\2\4\1\43\1\4\1\44\1\45\1\46\1\47\2\4"+
    "\1\50\1\4\1\51\1\52\1\53\102\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\5\4\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\4\0\1\54\10\0\1\55\4\0"+
    "\1\54\62\0\1\56\1\57\102\0\1\60\101\0\1\61"+
    "\100\0\1\61\66\0\2\4\11\0\1\4\3\0\2\4"+
    "\1\62\11\4\2\0\3\4\1\63\1\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\17\0\1\64\64\0\1\54"+
    "\10\0\1\55\4\0\1\54\2\65\56\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\4\1\66\3\4\3\0"+
    "\1\67\3\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\3\4\1\70\1\4"+
    "\3\0\1\71\3\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\1\72\3\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\7\4\1\73\4\4\2\0\5\4"+
    "\3\0\1\74\3\4\3\0\7\4\2\0\10\4\1\0"+
    "\16\75\1\0\16\75\1\76\1\77\41\75\2\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\4\1\100\3\4"+
    "\3\0\4\4\3\0\3\4\1\101\3\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\102\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\103\4\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\47\0\1\104\33\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\2\4\1\105"+
    "\2\4\3\0\4\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\1\106\3\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\13\4\1\107\2\0\5\4\3\0"+
    "\1\4\1\110\2\4\3\0\1\111\6\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\3\4\1\112\3\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\1\4"+
    "\1\113\3\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\7\4\1\114\4\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\115\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\116\3\0\14\4\2\0\5\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\117"+
    "\3\0\14\4\2\0\5\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\120\3\0\14\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\4\0\1\54\10\0\1\55\1\121\3\0\1\54\5\0"+
    "\1\121\53\0\1\122\15\0\1\122\56\0\16\56\1\64"+
    "\1\123\60\56\5\57\1\124\72\57\2\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\125\4\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\4\4\1\126\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\4\0\1\65\11\0\1\65\3\0"+
    "\1\65\2\0\11\65\45\0\2\4\11\0\1\127\3\0"+
    "\14\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\5\4\3\0\1\130\3\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\7\4\1\131\4\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\1\4\1\132\2\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\2\4"+
    "\1\133\2\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\3\4"+
    "\1\134\1\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\1\4"+
    "\1\135\3\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\1\0\16\75\3\0\57\75\2\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\2\4\1\136\2\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\5\4\3\0\3\4\1\137\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\4\3\0"+
    "\14\4\2\0\1\140\4\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\1\4\1\141\3\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\3\4\1\142\1\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\5\4\3\0\3\4\1\143\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\1\144\4\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\1\4\1\145\5\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\3\4\1\146\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\3\4\1\147\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\3\4\1\150\1\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\7\4\1\151\4\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\5\4\3\0\4\4"+
    "\3\0\2\4\1\152\4\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\153\4\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\154\4\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\4\0\1\155\15\0\1\155"+
    "\61\0\1\122\11\0\1\121\3\0\1\122\5\0\1\121"+
    "\50\0\4\57\1\64\1\124\72\57\2\0\2\4\11\0"+
    "\1\156\3\0\14\4\2\0\5\4\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\157\3\0"+
    "\14\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\7\4\1\160"+
    "\4\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\3\4\1\161\1\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\4\4\1\162\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\4\4"+
    "\1\163\3\0\4\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\10\4\1\164\3\4\2\0"+
    "\5\4\3\0\4\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\4\4\1\136"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\165\3\0\14\4\2\0\5\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\4\4\1\166\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\4\3\0"+
    "\14\4\2\0\2\4\1\167\2\4\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\4\3\0"+
    "\14\4\2\0\5\4\3\0\3\4\1\170\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\3\4\1\171\1\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\12\4"+
    "\1\172\1\4\2\0\5\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\173\3\0\14\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\3\4"+
    "\1\174\1\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\3\4"+
    "\1\175\1\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\1\4\1\176\2\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\3\4"+
    "\1\177\1\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\12\4\1\200\1\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\3\4\1\201\10\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\4\4\1\202\7\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\4\4\1\203\7\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\1\0\3\204\1\155\12\204\3\0\1\155\56\204\2\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\1\4\1\205\2\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\4\4\3\0\4\4\1\206\2\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\4\4\1\207"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\210\4\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\3\4\1\211\1\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\4\1\212\3\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\5\4\3\0\1\4\1\213"+
    "\2\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\4\1\214\3\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\215\3\0\14\4\2\0\5\4\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\216\3\0"+
    "\14\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\1\217\4\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\1\220\3\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\4\4\3\0\7\4\2\0\2\4\1\221\1\222\4\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\1\4"+
    "\1\223\3\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\5\4\1\224\2\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\5\4\1\225\2\4"+
    "\4\0\1\204\15\0\1\204\60\0\2\4\11\0\1\4"+
    "\3\0\12\4\1\226\1\4\2\0\5\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\227"+
    "\3\0\14\4\2\0\5\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\5\4\3\0\1\4\1\230\2\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\4\3\0\14\4"+
    "\2\0\5\4\3\0\4\4\3\0\6\4\1\231\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\13\4\1\232"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\1\233\6\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\11\4\1\234\2\4\2\0"+
    "\5\4\3\0\4\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\1\4\1\235\2\4\3\0\7\4\2\0\10\4\3\0"+
    "\2\4\11\0\1\4\3\0\14\4\2\0\5\4\3\0"+
    "\3\4\1\236\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\4\1\237\3\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\240\4\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\1\241\4\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\4\4\1\242\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\4\3\0"+
    "\7\4\1\243\4\4\2\0\5\4\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\244\3\0"+
    "\14\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\1\245\4\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\1\4\1\246\2\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\7\4\1\247\4\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\250\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\251\3\0\14\4\2\0\5\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\11\4\1\252\2\4\2\0\5\4\3\0\4\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\5\4\3\0\1\4\1\253\2\4"+
    "\3\0\7\4\2\0\10\4\3\0\2\4\11\0\1\254"+
    "\3\0\14\4\2\0\5\4\3\0\4\4\3\0\7\4"+
    "\2\0\10\4\3\0\2\4\11\0\1\255\3\0\14\4"+
    "\2\0\5\4\3\0\4\4\3\0\7\4\2\0\10\4"+
    "\3\0\2\4\11\0\1\4\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\5\4\1\256\2\4"+
    "\3\0\2\4\11\0\1\257\3\0\14\4\2\0\5\4"+
    "\3\0\4\4\3\0\7\4\2\0\10\4\3\0\2\4"+
    "\11\0\1\4\3\0\14\4\2\0\1\260\4\4\3\0"+
    "\4\4\3\0\7\4\2\0\10\4\3\0\2\4\11\0"+
    "\1\4\3\0\14\4\2\0\5\4\3\0\4\4\3\0"+
    "\6\4\1\261\2\0\10\4\3\0\2\4\11\0\1\4"+
    "\3\0\14\4\2\0\4\4\1\262\3\0\4\4\3\0"+
    "\7\4\2\0\10\4\3\0\2\4\11\0\1\263\3\0"+
    "\14\4\2\0\5\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\3\0\2\4\11\0\1\4\3\0\14\4\2\0"+
    "\1\4\1\264\3\4\3\0\4\4\3\0\7\4\2\0"+
    "\10\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\5\1\1\11\13\1\1\11"+
    "\1\1\1\11\3\1\3\11\2\1\2\11\5\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\11\2\1\1\11\10\1"+
    "\1\0\1\11\1\0\4\1\1\11\14\1\1\0\2\1"+
    "\1\0\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Generamos un Symbol para el tipo de token encontrado
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { AnalizadorSintacticoInterfaz.getAnalizador().setError("Error Lexico, token:   "+yytext()+"     , linea: "+(1+yyline)+" , columna: "+(yycolumn+1)+". Token no valido!");AnalizadorSintacticoInterfaz.getAnalizador().error = true;
          }
        case 51: break;
        case 2: 
          { /* ignora el espacio */
          }
        case 52: break;
        case 3: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.IDENTIFICADOR, yytext());
          }
        case 53: break;
        case 4: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.ENTERO, yytext());
          }
        case 54: break;
        case 5: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.OPERADORESA, yytext());
          }
        case 55: break;
        case 6: 
          { return symbol(sym.OPERADORESC, yytext());
          }
        case 56: break;
        case 7: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.IGUAL, yytext());
          }
        case 57: break;
        case 8: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.NEGACION, yytext());
          }
        case 58: break;
        case 9: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.PUNTO, yytext());
          }
        case 59: break;
        case 10: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
                TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.PUNTOYCOMA, yytext());
          }
        case 60: break;
        case 11: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.CORCH_A, yytext());
          }
        case 61: break;
        case 12: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.CORCH_C, yytext());
          }
        case 62: break;
        case 13: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.PAR_A, yytext());
          }
        case 63: break;
        case 14: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.PAR_C, yytext());
          }
        case 64: break;
        case 15: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.COMA, yytext());
          }
        case 65: break;
        case 16: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.LL_A, yytext());
          }
        case 66: break;
        case 17: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.LL_C, yytext());
          }
        case 67: break;
        case 18: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.MENOS, yytext());
          }
        case 68: break;
        case 19: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.DECIMAL, yytext());
          }
        case 69: break;
        case 20: 
          { 
          }
        case 70: break;
        case 21: 
          { return symbol(sym.OPERADORESL, yytext());
          }
        case 71: break;
        case 22: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                      return symbol(sym.TEXTO, yytext());
          }
        case 72: break;
        case 23: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.CORCH, yytext());
          }
        case 73: break;
        case 24: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.SI, yytext());
          }
        case 74: break;
        case 25: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.PARA, yytext());
          }
        case 75: break;
        case 26: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.TDE, yytext());
          }
        case 76: break;
        case 27: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.NUEVO, yytext());
          }
        case 77: break;
        case 28: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.SINO, yytext());
          }
        case 78: break;
        case 29: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.TDB, yytext());
          }
        case 79: break;
        case 30: 
          { return symbol(sym.BOOLCONST, yytext());
          }
        case 80: break;
        case 31: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.ESTO, yytext());
          }
        case 81: break;
        case 32: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.NULO, yytext());
          }
        case 82: break;
        case 33: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.VD, yytext());
          }
        case 83: break;
        case 34: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.ROMPE, yytext());
          }
        case 84: break;
        case 35: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.CLASE, yytext());
          }
        case 85: break;
        case 36: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
        return symbol(sym.CONSTANTE, yytext());
          }
        case 86: break;
        case 37: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.MIENTRAS, yytext());
          }
        case 87: break;
        case 38: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.IMPRIMIR, yytext());
          }
        case 88: break;
        case 39: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.TDD, yytext());
          }
        case 89: break;
        case 40: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.RETORNA, yytext());
          }
        case 90: break;
        case 41: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.TDS, yytext());
          }
        case 91: break;
        case 42: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.M_OC, yytext());
          }
        case 92: break;
        case 43: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.HERENCIA, yytext());
          }
        case 93: break;
        case 44: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.OBTENER_BYTES, yytext());
          }
        case 94: break;
        case 45: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.SET_BYTES, yytext());
          }
        case 95: break;
        case 46: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.LEER_LIN, yytext());
          }
        case 96: break;
        case 47: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.NUEVO_A, yytext());
          }
        case 97: break;
        case 48: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.INTERFAZ, yytext());
          }
        case 98: break;
        case 49: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.IMPLEMENTA, yytext());
          }
        case 99: break;
        case 50: 
          { TablaDeSimbolos.getTabla().setLinea(yyline+1);
            TablaDeSimbolos.getTabla().setColumna(yycolumn+1);
                return symbol(sym.LEER_EN, yytext());
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
