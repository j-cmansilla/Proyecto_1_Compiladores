
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 16 15:16:41 CST 2018
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 16 15:16:41 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\042\004\000" +
    "\002\042\002\000\002\004\004\000\002\007\004\000\002" +
    "\007\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\047\002\000\002\005\011\000\002\050\002\000" +
    "\002\005\011\000\002\011\003\000\002\011\002\000\002" +
    "\044\003\000\002\044\005\000\002\051\002\000\002\013" +
    "\012\000\002\030\004\000\002\030\002\000\002\015\004" +
    "\000\002\015\002\000\002\016\004\000\002\016\002\000" +
    "\002\045\003\000\002\045\005\000\002\014\003\000\002" +
    "\014\003\000\002\052\002\000\002\006\010\000\002\043" +
    "\004\000\002\043\002\000\002\017\010\000\002\017\010" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\033" +
    "\003\000\002\033\002\000\002\012\006\000\002\022\010" +
    "\000\002\034\004\000\002\034\002\000\002\031\004\000" +
    "\002\031\002\000\002\032\004\000\002\032\002\000\002" +
    "\023\007\000\002\024\013\000\002\026\005\000\002\025" +
    "\004\000\002\027\007\000\002\021\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\004\000\002\021\006\000\002\021\010" +
    "\000\002\021\005\000\002\021\005\000\002\021\006\000" +
    "\002\035\003\000\002\035\005\000\002\035\006\000\002" +
    "\037\006\000\002\037\010\000\002\037\010\000\002\041" +
    "\006\000\002\041\010\000\002\040\003\000\002\040\002" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\046\003\000\002" +
    "\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\026\003\017\005\022\007\004\010\005\011" +
    "\006\013\025\014\023\020\011\023\007\062\015\001\002" +
    "\000\010\005\ufff4\016\ufff4\035\ufff4\001\002\000\010\005" +
    "\ufff3\016\ufff3\035\ufff3\001\002\000\010\005\ufff2\016\ufff2" +
    "\035\ufff2\001\002\000\004\005\303\001\002\000\006\005" +
    "\275\035\206\001\002\000\004\005\254\001\002\000\030" +
    "\002\ufffd\003\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\013" +
    "\ufffd\014\ufffd\020\ufffd\023\ufffd\062\ufffd\001\002\000\030" +
    "\002\ufff8\003\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\020\ufff8\023\ufff8\062\ufff8\001\002\000\004" +
    "\002\251\001\002\000\014\005\022\007\004\010\005\011" +
    "\006\013\025\001\002\000\030\002\ufffc\003\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\020\ufffc\023" +
    "\ufffc\062\ufffc\001\002\000\006\006\245\040\246\001\002" +
    "\000\004\006\244\001\002\000\030\002\ufffe\003\ufffe\005" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe\020\ufffe" +
    "\023\ufffe\062\ufffe\001\002\000\010\005\ufff0\016\ufff0\035" +
    "\ufff0\001\002\000\004\005\026\001\002\000\030\002\uffff" +
    "\003\uffff\005\uffff\007\uffff\010\uffff\011\uffff\013\uffff\014" +
    "\uffff\020\uffff\023\uffff\062\uffff\001\002\000\010\005\ufff1" +
    "\016\ufff1\035\ufff1\001\002\000\004\015\uffec\001\002\000" +
    "\004\015\030\001\002\000\020\005\022\007\004\010\005" +
    "\011\006\013\025\016\uffe9\062\015\001\002\000\006\016" +
    "\uffe8\017\uffe8\001\002\000\006\005\243\035\206\001\002" +
    "\000\004\016\037\001\002\000\006\016\uffea\017\035\001" +
    "\002\000\016\005\022\007\004\010\005\011\006\013\025" +
    "\062\015\001\002\000\006\016\uffe7\017\uffe7\001\002\000" +
    "\004\037\041\001\002\000\032\002\uffeb\003\uffeb\005\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\020\uffeb\023" +
    "\uffeb\040\uffeb\062\uffeb\001\002\000\074\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\024" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\056\uffc4" +
    "\062\uffc4\001\002\000\074\005\057\006\046\007\004\010" +
    "\005\011\006\012\100\013\025\015\071\024\053\026\103" +
    "\027\060\030\070\031\055\032\051\033\062\037\041\040" +
    "\uffc2\041\066\042\050\043\056\044\101\046\063\047\052" +
    "\050\105\051\064\052\074\053\073\056\067\062\015\001" +
    "\002\000\064\005\uffce\006\uffce\012\uffce\015\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\056" +
    "\uffce\001\002\000\004\040\242\001\002\000\030\004\uffbb" +
    "\006\uffbb\016\uffbb\017\uffbb\034\uffbb\036\uffbb\045\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\001\002\000\064\005\uffd3" +
    "\006\uffd3\012\uffd3\015\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\056\uffd3\001\002\000\064" +
    "\005\uffd0\006\uffd0\012\uffd0\015\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\056\uffd0\001\002" +
    "\000\004\015\237\001\002\000\004\015\233\001\002\000" +
    "\030\004\uffa0\006\uffa0\016\uffa0\017\uffa0\034\uffa0\036\uffa0" +
    "\045\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\001\002\000" +
    "\004\015\224\001\002\000\064\005\uffcd\006\uffcd\012\uffcd" +
    "\015\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\056\uffcd\001\002\000\004\006\223\001\002" +
    "\000\004\015\221\001\002\000\030\004\uffaa\005\ufff0\006" +
    "\uffaa\015\113\034\uffaa\035\ufff0\045\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\001\002\000\004\015\215\001\002\000" +
    "\064\005\uffd1\006\uffd1\012\uffd1\015\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\056\uffd1\001" +
    "\002\000\030\004\uffb9\006\uffb9\016\uffb9\017\uffb9\034\uffb9" +
    "\036\uffb9\045\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001" +
    "\002\000\030\004\uff9f\006\uff9f\016\uff9f\017\uff9f\034\uff9f" +
    "\036\uff9f\045\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\001" +
    "\002\000\030\004\uff9c\006\uff9c\016\uff9c\017\uff9c\034\uff9c" +
    "\036\uff9c\045\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001" +
    "\002\000\064\005\uffcc\006\uffcc\012\uffcc\015\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056" +
    "\uffcc\001\002\000\040\005\112\012\100\015\071\033\062" +
    "\041\066\042\050\043\056\044\101\046\063\047\052\050" +
    "\105\051\064\052\074\053\073\056\067\001\002\000\040" +
    "\005\112\012\100\015\071\033\062\041\066\042\050\043" +
    "\056\044\101\046\063\047\052\050\105\051\064\052\074" +
    "\053\073\056\067\001\002\000\042\005\112\006\uffca\012" +
    "\100\015\071\033\062\041\066\042\050\043\056\044\101" +
    "\046\063\047\052\050\105\051\064\052\074\053\073\056" +
    "\067\001\002\000\040\005\112\012\100\015\071\033\062" +
    "\041\066\042\050\043\056\044\101\046\063\047\052\050" +
    "\105\051\064\052\074\053\073\056\067\001\002\000\064" +
    "\005\uffd2\006\uffd2\012\uffd2\015\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2\001\002" +
    "\000\004\015\201\001\002\000\004\015\176\001\002\000" +
    "\022\004\117\006\175\034\124\045\121\056\123\057\122" +
    "\060\125\061\120\001\002\000\030\004\uffba\006\uffba\016" +
    "\uffba\017\uffba\034\uffba\036\uffba\045\uffba\056\uffba\057\173" +
    "\060\uffba\061\uffba\001\002\000\074\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\024\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5\062" +
    "\uffc5\001\002\000\030\004\uff9e\006\uff9e\016\uff9e\017\uff9e" +
    "\034\uff9e\036\uff9e\045\uff9e\056\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\001\002\000\004\015\171\001\002\000\062\005\112" +
    "\006\046\012\100\015\071\024\053\026\103\027\060\030" +
    "\070\031\055\032\051\033\062\037\041\040\uffc2\041\066" +
    "\042\050\043\056\044\101\046\063\047\052\050\105\051" +
    "\064\052\074\053\073\056\067\001\002\000\004\015\107" +
    "\001\002\000\030\004\uffb8\006\uffb8\016\uffb8\017\uffb8\034" +
    "\uffb8\036\uffb8\045\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\001\002\000\030\004\uff9d\006\uff9d\016\uff9d\017\uff9d\034" +
    "\uff9d\036\uff9d\045\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\001\002\000\064\005\uffcf\006\uffcf\012\uffcf\015\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\056\uffcf\001\002\000\042\005\112\006\uffca\012\100\015" +
    "\071\033\062\041\066\042\050\043\056\044\101\046\063" +
    "\047\052\050\105\051\064\052\074\053\073\056\067\001" +
    "\002\000\004\006\162\001\002\000\024\004\117\006\uffcb" +
    "\016\uffcb\034\124\045\121\056\123\057\122\060\125\061" +
    "\120\001\002\000\032\004\uffaa\006\uffaa\015\113\016\uffaa" +
    "\017\uffaa\034\uffaa\036\uffaa\045\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\001\002\000\042\005\112\012\100\015\071" +
    "\016\uffa1\033\062\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\004\016\161\001\002\000\006\016\uffa2\017" +
    "\157\001\002\000\024\004\117\016\uff9b\017\uff9b\034\124" +
    "\045\121\056\123\057\122\060\125\061\120\001\002\000" +
    "\040\005\112\012\100\015\071\033\062\041\066\042\050" +
    "\043\056\044\101\046\063\047\052\050\105\051\064\052" +
    "\074\053\073\056\067\001\002\000\040\005\112\012\100" +
    "\015\071\033\062\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\010\005\134\054\133\055\135\001\002\000" +
    "\040\005\112\012\100\015\071\033\062\041\066\042\050" +
    "\043\056\044\101\046\063\047\052\050\105\051\064\052" +
    "\074\053\073\056\067\001\002\000\040\005\112\012\100" +
    "\015\071\033\062\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\040\005\112\012\100\015\071\033\062\041" +
    "\066\042\050\043\056\044\101\046\063\047\052\050\105" +
    "\051\064\052\074\053\073\056\067\001\002\000\040\005" +
    "\112\012\100\015\071\033\062\041\066\042\050\043\056" +
    "\044\101\046\063\047\052\050\105\051\064\052\074\053" +
    "\073\056\067\001\002\000\026\004\117\006\uffb5\016\uffb5" +
    "\017\uffb5\034\124\036\uffb5\045\121\056\123\057\uffb5\061" +
    "\uffb5\001\002\000\022\004\117\034\124\036\130\045\121" +
    "\056\123\057\122\060\125\061\120\001\002\000\030\004" +
    "\uffa8\006\uffa8\016\uffa8\017\uffa8\034\uffa8\036\uffa8\045\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\061\uffa8\001\002\000\030\004" +
    "\uffb3\006\uffb3\016\uffb3\017\uffb3\034\124\036\uffb3\045\121" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000\030\004" +
    "\117\006\uffb2\016\uffb2\017\uffb2\034\124\036\uffb2\045\121" +
    "\056\123\057\uffb2\060\125\061\120\001\002\000\004\015" +
    "\152\001\002\000\032\004\uffa9\006\uffa9\015\147\016\uffa9" +
    "\017\uffa9\034\uffa9\036\uffa9\045\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\001\002\000\004\015\142\001\002\000\004" +
    "\015\137\001\002\000\042\005\112\012\100\015\071\016" +
    "\uffa1\033\062\041\066\042\050\043\056\044\101\046\063" +
    "\047\052\050\105\051\064\052\074\053\073\056\067\001" +
    "\002\000\004\016\141\001\002\000\030\004\uffa5\006\uffa5" +
    "\016\uffa5\017\uffa5\034\uffa5\036\uffa5\045\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\001\002\000\040\005\112\012\100" +
    "\015\071\033\062\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\022\004\117\017\144\034\124\045\121\056" +
    "\123\057\122\060\125\061\120\001\002\000\040\005\112" +
    "\012\100\015\071\033\062\041\066\042\050\043\056\044" +
    "\101\046\063\047\052\050\105\051\064\052\074\053\073" +
    "\056\067\001\002\000\022\004\117\016\146\034\124\045" +
    "\121\056\123\057\122\060\125\061\120\001\002\000\004" +
    "\015\uffa3\001\002\000\042\005\112\012\100\015\071\016" +
    "\uffa1\033\062\041\066\042\050\043\056\044\101\046\063" +
    "\047\052\050\105\051\064\052\074\053\073\056\067\001" +
    "\002\000\004\016\151\001\002\000\030\004\uffa6\006\uffa6" +
    "\016\uffa6\017\uffa6\034\uffa6\036\uffa6\045\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\001\002\000\040\005\112\012\100" +
    "\015\071\033\062\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\022\004\117\016\154\034\124\045\121\056" +
    "\123\057\122\060\125\061\120\001\002\000\004\015\uffa4" +
    "\001\002\000\030\004\117\006\uffb4\016\uffb4\017\uffb4\034" +
    "\124\036\uffb4\045\121\056\123\057\uffb4\060\125\061\uffb4" +
    "\001\002\000\030\004\uffb6\006\uffb6\016\uffb6\017\uffb6\034" +
    "\124\036\uffb6\045\121\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\001\002\000\040\005\112\012\100\015\071\033\062\041" +
    "\066\042\050\043\056\044\101\046\063\047\052\050\105" +
    "\051\064\052\074\053\073\056\067\001\002\000\024\004" +
    "\117\016\uff9a\017\uff9a\034\124\045\121\056\123\057\122" +
    "\060\125\061\120\001\002\000\030\004\uffa7\006\uffa7\016" +
    "\uffa7\017\uffa7\034\uffa7\036\uffa7\045\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\001\002\000\040\005\112\012\100\015" +
    "\071\033\062\041\066\042\050\043\056\044\101\046\063" +
    "\047\052\050\105\051\064\052\074\053\073\056\067\001" +
    "\002\000\022\004\117\006\164\034\124\045\121\056\123" +
    "\057\122\060\125\061\120\001\002\000\042\005\112\012" +
    "\100\015\071\016\uffca\033\062\041\066\042\050\043\056" +
    "\044\101\046\063\047\052\050\105\051\064\052\074\053" +
    "\073\056\067\001\002\000\004\016\166\001\002\000\060" +
    "\005\112\006\046\012\100\015\071\024\053\026\103\027" +
    "\060\030\070\031\055\032\051\033\062\037\041\041\066" +
    "\042\050\043\056\044\101\046\063\047\052\050\105\051" +
    "\064\052\074\053\073\056\067\001\002\000\064\005\uffc0" +
    "\006\uffc0\012\uffc0\015\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\001\002\000\004" +
    "\040\uffc3\001\002\000\004\016\172\001\002\000\030\004" +
    "\uffac\006\uffac\016\uffac\017\uffac\034\uffac\036\uffac\045\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\001\002\000\040\005" +
    "\112\012\100\015\071\033\062\041\066\042\050\043\056" +
    "\044\101\046\063\047\052\050\105\051\064\052\074\053" +
    "\073\056\067\001\002\000\030\004\117\006\uffbc\016\uffbc" +
    "\017\uffbc\034\124\036\uffbc\045\121\056\123\057\uffbc\060" +
    "\125\061\120\001\002\000\064\005\uffd4\006\uffd4\012\uffd4" +
    "\015\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\056\uffd4\001\002\000\004\005\177\001\002" +
    "\000\004\016\200\001\002\000\030\004\uffaf\006\uffaf\016" +
    "\uffaf\017\uffaf\034\uffaf\036\uffaf\045\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\001\002\000\040\005\112\012\100\015" +
    "\071\033\062\041\066\042\050\043\056\044\101\046\063" +
    "\047\052\050\105\051\064\052\074\053\073\056\067\001" +
    "\002\000\022\004\117\017\203\034\124\045\121\056\123" +
    "\057\122\060\125\061\120\001\002\000\014\005\022\007" +
    "\004\010\005\011\006\013\025\001\002\000\006\016\205" +
    "\035\206\001\002\000\030\004\uffae\006\uffae\016\uffae\017" +
    "\uffae\034\uffae\036\uffae\045\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\001\002\000\010\005\uffef\016\uffef\035\uffef\001" +
    "\002\000\022\004\117\016\210\034\124\045\121\056\123" +
    "\057\122\060\125\061\120\001\002\000\030\004\uffb7\006" +
    "\uffb7\016\uffb7\017\uffb7\034\uffb7\036\uffb7\045\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\001\002\000\004\006\212\001" +
    "\002\000\064\005\uffbf\006\uffbf\012\uffbf\015\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056" +
    "\uffbf\001\002\000\030\004\uffb1\006\uffb1\016\uffb1\017\uffb1" +
    "\034\124\036\uffb1\045\121\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\001\002\000\030\004\uffb0\006\uffb0\016\uffb0\017\uffb0" +
    "\034\124\036\uffb0\045\121\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\001\002\000\040\005\112\012\100\015\071\033\062" +
    "\041\066\042\050\043\056\044\101\046\063\047\052\050" +
    "\105\051\064\052\074\053\073\056\067\001\002\000\022" +
    "\004\117\016\217\034\124\045\121\056\123\057\122\060" +
    "\125\061\120\001\002\000\060\005\112\006\046\012\100" +
    "\015\071\024\053\026\103\027\060\030\070\031\055\032" +
    "\051\033\062\037\041\041\066\042\050\043\056\044\101" +
    "\046\063\047\052\050\105\051\064\052\074\053\073\056" +
    "\067\001\002\000\064\005\uffc1\006\uffc1\012\uffc1\015\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\056\uffc1\001\002\000\004\016\222\001\002\000\030" +
    "\004\uffad\006\uffad\016\uffad\017\uffad\034\uffad\036\uffad\045" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\001\002\000\064" +
    "\005\uffbe\006\uffbe\012\uffbe\015\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\056\uffbe\001\002" +
    "\000\040\005\112\012\100\015\071\033\062\041\066\042" +
    "\050\043\056\044\101\046\063\047\052\050\105\051\064" +
    "\052\074\053\073\056\067\001\002\000\022\004\117\016" +
    "\226\034\124\045\121\056\123\057\122\060\125\061\120" +
    "\001\002\000\060\005\112\006\046\012\100\015\071\024" +
    "\053\026\103\027\060\030\070\031\055\032\051\033\062" +
    "\037\041\041\066\042\050\043\056\044\101\046\063\047" +
    "\052\050\105\051\064\052\074\053\073\056\067\001\002" +
    "\000\064\005\uffc6\006\uffc6\012\uffc6\015\uffc6\024\uffc6\025" +
    "\231\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6" +
    "\001\002\000\064\005\uffc8\006\uffc8\012\uffc8\015\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\056\uffc8\001\002\000\060\005\112\006\046\012\100\015" +
    "\071\024\053\026\103\027\060\030\070\031\055\032\051" +
    "\033\062\037\041\041\066\042\050\043\056\044\101\046" +
    "\063\047\052\050\105\051\064\052\074\053\073\056\067" +
    "\001\002\000\064\005\uffc7\006\uffc7\012\uffc7\015\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\056\uffc7\001\002\000\040\005\112\012\100\015\071\033" +
    "\062\041\066\042\050\043\056\044\101\046\063\047\052" +
    "\050\105\051\064\052\074\053\073\056\067\001\002\000" +
    "\006\016\235\017\157\001\002\000\004\006\236\001\002" +
    "\000\064\005\uffbd\006\uffbd\012\uffbd\015\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\056\uffbd" +
    "\001\002\000\040\005\112\012\100\015\071\033\062\041" +
    "\066\042\050\043\056\044\101\046\063\047\052\050\105" +
    "\051\064\052\074\053\073\056\067\001\002\000\022\004" +
    "\117\016\241\034\124\045\121\056\123\057\122\060\125" +
    "\061\120\001\002\000\030\004\uffab\006\uffab\016\uffab\017" +
    "\uffab\034\uffab\036\uffab\045\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\001\002\000\110\002\uffc9\003\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\056\uffc9\062\uffc9\001\002" +
    "\000\010\006\ufff6\016\ufff6\017\ufff6\001\002\000\106\002" +
    "\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7" +
    "\062\ufff7\001\002\000\030\002\ufffb\003\ufffb\005\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\020\ufffb\023\ufffb" +
    "\062\ufffb\001\002\000\030\002\ufffa\003\ufffa\005\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\020\ufffa\023\ufffa" +
    "\062\ufffa\001\002\000\006\005\250\035\206\001\002\000" +
    "\010\006\ufff5\016\ufff5\017\ufff5\001\002\000\004\002\001" +
    "\001\002\000\030\002\000\003\017\005\022\007\004\010" +
    "\005\011\006\013\025\014\023\020\011\023\007\062\015" +
    "\001\002\000\030\002\ufff9\003\ufff9\005\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\020\ufff9\023\ufff9\062\ufff9" +
    "\001\002\000\010\021\uffe6\022\uffe6\037\uffe6\001\002\000" +
    "\010\021\257\022\uffe1\037\uffe1\001\002\000\006\022\261" +
    "\037\uffdf\001\002\000\004\005\260\001\002\000\006\022" +
    "\uffe2\037\uffe2\001\002\000\004\005\272\001\002\000\004" +
    "\037\263\001\002\000\022\005\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\040\uffe3\062\uffe3\001\002\000\022" +
    "\005\022\007\004\010\005\011\006\013\025\014\023\040" +
    "\267\062\015\001\002\000\022\005\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\040\uffdc\062\uffdc\001\002\000" +
    "\022\005\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4" +
    "\040\uffe4\062\uffe4\001\002\000\030\002\uffe5\003\uffe5\005" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\020\uffe5" +
    "\023\uffe5\062\uffe5\001\002\000\022\005\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\014\uffdb\040\uffdb\062\uffdb\001\002" +
    "\000\006\017\273\037\uffe0\001\002\000\006\017\uffde\037" +
    "\uffde\001\002\000\004\005\274\001\002\000\006\017\uffdd" +
    "\037\uffdd\001\002\000\006\006\ufff6\015\uffee\001\002\000" +
    "\004\015\277\001\002\000\020\005\022\007\004\010\005" +
    "\011\006\013\025\016\uffe9\062\015\001\002\000\004\016" +
    "\301\001\002\000\004\037\041\001\002\000\032\002\uffed" +
    "\003\uffed\005\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014" +
    "\uffed\020\uffed\023\uffed\040\uffed\062\uffed\001\002\000\004" +
    "\037\uffda\001\002\000\004\037\305\001\002\000\020\005" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\040\uffd7" +
    "\001\002\000\020\005\022\007\004\010\005\011\006\013" +
    "\025\014\307\040\311\001\002\000\004\005\320\001\002" +
    "\000\006\005\313\035\206\001\002\000\030\002\uffd9\003" +
    "\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\020\uffd9\023\uffd9\062\uffd9\001\002\000\020\005\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\040\uffd8\001\002" +
    "\000\004\015\314\001\002\000\020\005\022\007\004\010" +
    "\005\011\006\013\025\016\uffe9\062\015\001\002\000\004" +
    "\016\316\001\002\000\004\006\317\001\002\000\020\005" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\040\uffd6" +
    "\001\002\000\004\015\321\001\002\000\020\005\022\007" +
    "\004\010\005\011\006\013\025\016\uffe9\062\015\001\002" +
    "\000\004\016\323\001\002\000\004\006\324\001\002\000" +
    "\020\005\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\040\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\022\002\013\003\012\004\023\005\020\006" +
    "\015\007\017\010\007\013\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\251\001\001\000\002\001\001\000\004\010\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\026\001\001" +
    "\000\002\001\001\000\012\007\030\010\031\011\032\044" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\035\010\031\001" +
    "\001\000\002\001\001\000\004\012\037\001\001\000\002" +
    "\001\001\000\004\031\041\001\001\000\042\004\076\007" +
    "\017\010\031\012\064\020\101\021\074\022\071\023\060" +
    "\024\046\025\105\026\042\027\053\032\043\035\075\036" +
    "\044\037\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\213\035\075\036\044\037\103" +
    "\001\001\000\012\021\212\035\075\036\044\037\103\001" +
    "\001\000\014\021\110\033\210\035\075\036\044\037\103" +
    "\001\001\000\012\021\206\035\075\036\044\037\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\012\064\020\101" +
    "\021\074\022\071\023\060\024\046\025\105\026\042\027" +
    "\053\032\167\035\075\036\044\037\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\110\033\107\035\075\036\044\037\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\115\035\075\036\044\037\103\040\113" +
    "\046\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\155\035\075\036\044\037\103" +
    "\001\001\000\012\021\154\035\075\036\044\037\103\001" +
    "\001\000\004\041\135\001\001\000\012\021\131\035\075" +
    "\036\044\037\103\001\001\000\012\021\130\035\075\036" +
    "\044\037\103\001\001\000\012\021\126\035\075\036\044" +
    "\037\103\001\001\000\012\021\125\035\075\036\044\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\115\035\075\036\044\037\103\040\137\046" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\142\035\075\036\044\037\103\001\001\000\002\001" +
    "\001\000\012\021\144\035\075\036\044\037\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\115\035" +
    "\075\036\044\037\103\040\147\046\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\152\035\075\036" +
    "\044\037\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\157\035" +
    "\075\036\044\037\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\162\035\075\036\044\037\103\001" +
    "\001\000\002\001\001\000\014\021\110\033\164\035\075" +
    "\036\044\037\103\001\001\000\002\001\001\000\032\012" +
    "\064\020\166\021\074\022\071\023\060\024\046\025\105" +
    "\026\042\027\053\035\075\036\044\037\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\173\035\075\036\044\037\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\201\035" +
    "\075\036\044\037\103\001\001\000\002\001\001\000\004" +
    "\010\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\215\035\075\036\044\037\103\001\001" +
    "\000\002\001\001\000\032\012\064\020\217\021\074\022" +
    "\071\023\060\024\046\025\105\026\042\027\053\035\075" +
    "\036\044\037\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\224" +
    "\035\075\036\044\037\103\001\001\000\002\001\001\000" +
    "\032\012\064\020\226\021\074\022\071\023\060\024\046" +
    "\025\105\026\042\027\053\035\075\036\044\037\103\001" +
    "\001\000\004\034\227\001\001\000\002\001\001\000\032" +
    "\012\064\020\231\021\074\022\071\023\060\024\046\025" +
    "\105\026\042\027\053\035\075\036\044\037\103\001\001" +
    "\000\002\001\001\000\014\021\115\035\075\036\044\037" +
    "\103\046\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\237\035\075\036\044\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\252\004\023\005\020\006" +
    "\015\007\017\010\007\013\011\001\001\000\002\001\001" +
    "\000\004\051\254\001\001\000\004\015\255\001\001\000" +
    "\004\016\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\270\001\001\000\002\001\001\000\004\030" +
    "\263\001\001\000\014\004\264\005\267\007\017\010\007" +
    "\014\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\275\001\001\000\002\001\001\000\012\007\030\010\031" +
    "\011\277\044\033\001\001\000\002\001\001\000\004\012" +
    "\301\001\001\000\002\001\001\000\004\052\303\001\001" +
    "\000\002\001\001\000\004\043\305\001\001\000\006\010" +
    "\307\017\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\030\010\031\011\314\044\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\030\010\031\011\321\044\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    private boolean error = false;
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" Sintactico, simbolo   "+s.value.toString()+"   no esperado.");
            if (s.left >= 0) {
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);
        AnalizadorSintacticoInterfaz.getAnalizador().setError(m.toString());
        AnalizadorSintacticoInterfaz.getAnalizador().error = true;
        System.err.println(m);
        error = true;


    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("UFA2");
    }

    public void analizarSintacticamente(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            if(!AnalizadorSintacticoInterfaz.getAnalizador().error){
              AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            }

            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }

    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));

            Object result = asin.parse().value;
            AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprList ::= ExprList COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprList",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprList",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Constant ::= NULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Constant ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Constant ::= BOOLCONST 
            {
              Object RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = bo;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Constant ::= DECIMAL 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= decimal;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Constant ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = entero;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Actuals ::= ExprList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LibCall ::= SET_BYTES PAR_A Expr COMA Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LibCall ::= OBTENER_BYTES PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Call ::= Expr PUNTO LibCall PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Call ::= Expr PUNTO IDENTIFICADOR PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Call ::= IDENTIFICADOR PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LValue ::= Expr CORCH_A Expr CORCH_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LValue ::= Expr PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LValue ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = id.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= M_OC PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= LEER_LIN PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LEER_EN PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NUEVO_A PAR_A Expr COMA Tipo PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= NUEVO PAR_A IDENTIFICADOR PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= NEGACION Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= MENOS Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr IGUAL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = e1.toString()+","+"="+","+e2.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr MENOS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = e1.toString()+","+"-"+","+e2.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr OPERADORESL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = e1.toString()+","+operador.toString()+","+e2.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr OPERADORESC Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = e1.toString()+","+operador.toString()+","+e2.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OPERADORESA Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = e1.toString()+","+operador.toString()+","+e2.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= ESTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Constant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= LValue IGUAL Expr 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		TablaDeSimbolos.getTabla().asignarValor(valor.toString()+","+e.toString());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrintStmt ::= IMPRIMIR PAR_A ExprList PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BreakStmt ::= ROMPE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStmt ::= RETORNA ExprRepetir PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmt ::= PARA PAR_A ExprRepetir PUNTOYCOMA Expr PUNTOYCOMA ExprRepetir PAR_C Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStmt ::= MIENTRAS PAR_A Expr PAR_C Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SmtmRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SmtmRepetir",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SmtmRepetir ::= Stmt SmtmRepetir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SmtmRepetir",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VariableDeclRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclRepetir",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariableDeclRepetir ::= VariableDeclRepetir VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclRepetir",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElseRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ElseRepetir",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElseRepetir ::= SINO Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ElseRepetir",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IfStmt ::= SI PAR_A Expr PAR_C Stmt ElseRepetir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtBlock ::= LL_A VariableDeclRepetir SmtmRepetir LL_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprRepetir",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprRepetir ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprRepetir",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stmt ::= Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= VD IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= Tipo IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ReptPrototype ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReptPrototype",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ReptPrototype ::= ReptPrototype Prototype 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReptPrototype",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceDecl ::= INTERFAZ IDENTIFICADOR NT$3 LL_A ReptPrototype LL_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int interfazleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int interfazright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object interfaz = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setClaseActual("");
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int interfazleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int interfazright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object interfaz = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(interfaz.toString(),"","interfaz")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setClaseActual(interfaz.toString());
      }
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IDList ::= IDList COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDList",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IDList ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDList",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Implementar ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Implementar",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Implementar ::= IMPLEMENTA IDList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Implementar",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Herencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Herencias",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Herencias ::= HERENCIA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Herencias",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RepetirField ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepetirField",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RepetirField ::= RepetirField Field 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepetirField",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASE IDENTIFICADOR NT$2 Herencias Implementar LL_A RepetirField LL_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setClaseActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(clase.toString(),"","clase")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setClaseActual(clase.toString());
      }
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableList ::= VariableList COMA Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableList",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableList ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableList",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= VariableList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= VD IDENTIFICADOR NT$1 PAR_A Formals PAR_C StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setFuncionActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(funcion.toString(),"void","funcion")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setFuncionActual(funcion.toString());
      }
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Tipo IDENTIFICADOR NT$0 PAR_A Formals PAR_C StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
     TablaDeSimbolos.getTabla().removerTemporales();
     TablaDeSimbolos.getTabla().reducirAmbito();
     TablaDeSimbolos.getTabla().setFuncionActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

        if (TablaDeSimbolos.getTabla().insertarEnTabla(funcion.toString(),tipo.toString(),"funcion")) {
          TablaDeSimbolos.getTabla().aumentarAmbito();
          TablaDeSimbolos.getTabla().setFuncionActual(funcion.toString());
        }
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= Tipo CORCH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= TDS 
            {
              Object RESULT =null;
		 RESULT = "cadena"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= TDB 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= TDD 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= TDE 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= CONSTANTE Tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().insertarEnTabla(id.toString(),tipo.toString(),"constante");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().insertarEnTabla(id.toString(),tipo.toString(),"variable");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclRep ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclRep",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclRep ::= DeclRep Decl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclRep",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error LL_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Decl DeclRep 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

