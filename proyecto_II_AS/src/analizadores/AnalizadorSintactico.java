
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 14:27:38 CST 2018
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 14:27:38 CST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\042\004\000\002\042\002\000\002\004\004\000\002" +
    "\007\004\000\002\007\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\050\002\000\002\005\011\000" +
    "\002\051\002\000\002\005\011\000\002\011\003\000\002" +
    "\011\002\000\002\045\003\000\002\045\005\000\002\052" +
    "\002\000\002\013\012\000\002\030\004\000\002\030\002" +
    "\000\002\015\004\000\002\015\002\000\002\016\004\000" +
    "\002\016\002\000\002\046\003\000\002\046\005\000\002" +
    "\014\003\000\002\014\003\000\002\053\002\000\002\006" +
    "\010\000\002\043\004\000\002\043\002\000\002\017\010" +
    "\000\002\017\010\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\033\003\000\002\033\002\000\002\012\006" +
    "\000\002\054\002\000\002\055\002\000\002\022\012\000" +
    "\002\034\004\000\002\034\002\000\002\031\004\000\002" +
    "\031\002\000\002\032\004\000\002\032\002\000\002\056" +
    "\002\000\002\057\002\000\002\023\011\000\002\060\002" +
    "\000\002\061\002\000\002\024\015\000\002\026\005\000" +
    "\002\025\004\000\002\027\007\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\004\000\002\021\004\000\002\021\006\000\002" +
    "\021\010\000\002\021\005\000\002\021\005\000\002\021" +
    "\006\000\002\035\003\000\002\035\005\000\002\035\006" +
    "\000\002\037\006\000\002\037\010\000\002\037\010\000" +
    "\002\041\006\000\002\041\010\000\002\040\003\000\002" +
    "\040\002\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\047\003" +
    "\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\030\003\020\005\022\007\004\010\005\011" +
    "\006\013\026\014\024\020\012\023\007\047\010\064\016" +
    "\001\002\000\010\005\ufff3\016\ufff3\035\ufff3\001\002\000" +
    "\010\005\ufff2\016\ufff2\035\ufff2\001\002\000\010\005\ufff1" +
    "\016\ufff1\035\ufff1\001\002\000\004\005\313\001\002\000" +
    "\004\053\312\001\002\000\006\005\304\035\211\001\002" +
    "\000\004\005\263\001\002\000\032\002\ufffd\003\ufffd\005" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\020\ufffd" +
    "\023\ufffd\047\ufffd\064\ufffd\001\002\000\032\002\ufff7\003" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7" +
    "\020\ufff7\023\ufff7\047\ufff7\064\ufff7\001\002\000\004\002" +
    "\260\001\002\000\014\005\022\007\004\010\005\011\006" +
    "\013\026\001\002\000\032\002\ufffc\003\ufffc\005\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\020\ufffc\023\ufffc" +
    "\047\ufffc\064\ufffc\001\002\000\006\006\254\040\255\001" +
    "\002\000\004\006\253\001\002\000\010\005\uffef\016\uffef" +
    "\035\uffef\001\002\000\032\002\ufffe\003\ufffe\005\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe\020\ufffe\023\ufffe" +
    "\047\ufffe\064\ufffe\001\002\000\004\005\027\001\002\000" +
    "\032\002\uffff\003\uffff\005\uffff\007\uffff\010\uffff\011\uffff" +
    "\013\uffff\014\uffff\020\uffff\023\uffff\047\uffff\064\uffff\001" +
    "\002\000\010\005\ufff0\016\ufff0\035\ufff0\001\002\000\004" +
    "\015\uffeb\001\002\000\004\015\031\001\002\000\020\005" +
    "\022\007\004\010\005\011\006\013\026\016\uffe8\064\016" +
    "\001\002\000\006\016\uffe7\017\uffe7\001\002\000\006\005" +
    "\252\035\211\001\002\000\004\016\040\001\002\000\006" +
    "\016\uffe9\017\036\001\002\000\016\005\022\007\004\010" +
    "\005\011\006\013\026\064\016\001\002\000\006\016\uffe6" +
    "\017\uffe6\001\002\000\004\037\042\001\002\000\034\002" +
    "\uffea\003\uffea\005\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\020\uffea\023\uffea\040\uffea\047\uffea\064\uffea\001" +
    "\002\000\074\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\024\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\046\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\054\uffc1\055\uffc1\060\uffc1\064\uffc1\001\002\000\074" +
    "\005\060\006\047\007\004\010\005\011\006\012\101\013" +
    "\026\015\071\024\054\026\104\027\061\030\072\031\056" +
    "\032\052\033\063\037\042\040\uffbf\041\067\042\051\043" +
    "\057\044\102\046\064\050\053\051\106\052\065\054\075" +
    "\055\074\060\070\064\016\001\002\000\064\005\uffcd\006" +
    "\uffcd\012\uffcd\015\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\060\uffcd\001\002\000\004\040" +
    "\251\001\002\000\030\004\uffb4\006\uffb4\016\uffb4\017\uffb4" +
    "\034\uffb4\036\uffb4\045\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\001\002\000\064\005\uffd2\006\uffd2\012\uffd2\015\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055" +
    "\uffd2\060\uffd2\001\002\000\064\005\uffcf\006\uffcf\012\uffcf" +
    "\015\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\060\uffcf\001\002\000\004\015\246\001\002" +
    "\000\004\015\242\001\002\000\030\004\uff99\006\uff99\016" +
    "\uff99\017\uff99\034\uff99\036\uff99\045\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\001\002\000\004\015\231\001\002\000" +
    "\064\005\uffcc\006\uffcc\012\uffcc\015\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\060\uffcc\001" +
    "\002\000\004\006\230\001\002\000\004\015\226\001\002" +
    "\000\030\004\uffa3\005\uffef\006\uffa3\015\115\034\uffa3\035" +
    "\uffef\045\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002" +
    "\000\004\015\220\001\002\000\064\005\uffd0\006\uffd0\012" +
    "\uffd0\015\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\054\uffd0\055\uffd0\060\uffd0\001\002\000\030\004\uffb2\006" +
    "\uffb2\016\uffb2\017\uffb2\034\uffb2\036\uffb2\045\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\001\002\000\030\004\uff98\006" +
    "\uff98\016\uff98\017\uff98\034\uff98\036\uff98\045\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\001\002\000\030\004\uff95\006" +
    "\uff95\016\uff95\017\uff95\034\uff95\036\uff95\045\uff95\060\uff95" +
    "\061\uff95\062\uff95\063\uff95\001\002\000\064\005\uffcb\006" +
    "\uffcb\012\uffcb\015\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\054\uffcb\055\uffcb\060\uffcb\001\002\000\040\005" +
    "\114\012\101\015\071\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\040\005\114\012\101\015\071" +
    "\033\063\041\067\042\051\043\057\044\102\046\064\050" +
    "\053\051\106\052\065\054\075\055\074\060\070\001\002" +
    "\000\040\005\114\012\101\015\071\033\063\041\067\042" +
    "\051\043\057\044\102\046\064\050\053\051\106\052\065" +
    "\054\075\055\074\060\070\001\002\000\042\005\114\006" +
    "\uffc9\012\101\015\071\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\064\005\uffd1\006\uffd1\012\uffd1" +
    "\015\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\055\uffd1\060\uffd1\001\002\000\004\015\204\001\002" +
    "\000\004\015\201\001\002\000\022\004\122\006\200\034" +
    "\126\045\123\060\125\061\124\062\127\063\121\001\002" +
    "\000\030\004\uffb3\006\uffb3\016\uffb3\017\uffb3\034\uffb3\036" +
    "\uffb3\045\uffb3\060\uffb3\061\176\062\uffb3\063\uffb3\001\002" +
    "\000\074\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\015\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\054\uffc2\055\uffc2\060\uffc2\064\uffc2\001\002\000\030\004" +
    "\uff97\006\uff97\016\uff97\017\uff97\034\uff97\036\uff97\045\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\001\002\000\004\015" +
    "\174\001\002\000\062\005\114\006\047\012\101\015\071" +
    "\024\054\026\104\027\061\030\072\031\056\032\052\033" +
    "\063\037\042\040\uffbf\041\067\042\051\043\057\044\102" +
    "\046\064\050\053\051\106\052\065\054\075\055\074\060" +
    "\070\001\002\000\004\015\110\001\002\000\030\004\uffb1" +
    "\006\uffb1\016\uffb1\017\uffb1\034\uffb1\036\uffb1\045\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002\000\030\004\uff96" +
    "\006\uff96\016\uff96\017\uff96\034\uff96\036\uff96\045\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\001\002\000\064\005\uffce" +
    "\006\uffce\012\uffce\015\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce\050\uffce\051" +
    "\uffce\052\uffce\054\uffce\055\uffce\060\uffce\001\002\000\042" +
    "\005\uffbb\006\uffbb\012\uffbb\015\uffbb\033\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\054\uffbb\055\uffbb\060\uffbb\001\002\000\042\005\114\006" +
    "\uffc9\012\101\015\071\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\004\006\164\001\002\000\024" +
    "\004\122\006\uffca\016\uffca\034\126\045\123\060\125\061" +
    "\124\062\127\063\121\001\002\000\032\004\uffa3\006\uffa3" +
    "\015\115\016\uffa3\017\uffa3\034\uffa3\036\uffa3\045\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000\042\005\114" +
    "\012\101\015\071\016\uff9a\033\063\041\067\042\051\043" +
    "\057\044\102\046\064\050\053\051\106\052\065\054\075" +
    "\055\074\060\070\001\002\000\004\016\163\001\002\000" +
    "\006\016\uff9b\017\161\001\002\000\024\004\122\016\uff94" +
    "\017\uff94\034\126\045\123\060\125\061\124\062\127\063" +
    "\121\001\002\000\040\005\114\012\101\015\071\033\063" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\040" +
    "\005\114\012\101\015\071\033\063\041\067\042\051\043" +
    "\057\044\102\046\064\050\053\051\106\052\065\054\075" +
    "\055\074\060\070\001\002\000\010\005\136\056\135\057" +
    "\140\001\002\000\040\005\114\012\101\015\071\033\063" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\040" +
    "\005\114\012\101\015\071\033\063\041\067\042\051\043" +
    "\057\044\102\046\064\050\053\051\106\052\065\054\075" +
    "\055\074\060\070\001\002\000\040\005\114\012\101\015" +
    "\071\033\063\041\067\042\051\043\057\044\102\046\064" +
    "\050\053\051\106\052\065\054\075\055\074\060\070\001" +
    "\002\000\040\005\114\012\101\015\071\033\063\041\067" +
    "\042\051\043\057\044\102\046\064\050\053\051\106\052" +
    "\065\054\075\055\074\060\070\001\002\000\026\004\122" +
    "\006\uffae\016\uffae\017\uffae\034\126\036\uffae\045\123\060" +
    "\125\061\uffae\063\uffae\001\002\000\022\004\122\034\126" +
    "\036\132\045\123\060\125\061\124\062\127\063\121\001" +
    "\002\000\030\004\uffa1\006\uffa1\016\uffa1\017\uffa1\034\uffa1" +
    "\036\uffa1\045\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001" +
    "\002\000\030\004\uffac\006\uffac\016\uffac\017\uffac\034\126" +
    "\036\uffac\045\123\060\uffac\061\uffac\062\uffac\063\uffac\001" +
    "\002\000\030\004\122\006\uffab\016\uffab\017\uffab\034\126" +
    "\036\uffab\045\123\060\125\061\uffab\062\127\063\121\001" +
    "\002\000\004\015\154\001\002\000\032\004\uffa2\006\uffa2" +
    "\015\151\016\uffa2\017\uffa2\034\uffa2\036\uffa2\045\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\001\002\000\004\015\146" +
    "\001\002\000\004\015\141\001\002\000\040\005\114\012" +
    "\101\015\071\033\063\041\067\042\051\043\057\044\102" +
    "\046\064\050\053\051\106\052\065\054\075\055\074\060" +
    "\070\001\002\000\022\004\122\017\143\034\126\045\123" +
    "\060\125\061\124\062\127\063\121\001\002\000\040\005" +
    "\114\012\101\015\071\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\022\004\122\016\145\034\126" +
    "\045\123\060\125\061\124\062\127\063\121\001\002\000" +
    "\004\015\uff9c\001\002\000\042\005\114\012\101\015\071" +
    "\016\uff9a\033\063\041\067\042\051\043\057\044\102\046" +
    "\064\050\053\051\106\052\065\054\075\055\074\060\070" +
    "\001\002\000\004\016\150\001\002\000\030\004\uff9e\006" +
    "\uff9e\016\uff9e\017\uff9e\034\uff9e\036\uff9e\045\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\001\002\000\042\005\114\012" +
    "\101\015\071\016\uff9a\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\004\016\153\001\002\000\030" +
    "\004\uff9f\006\uff9f\016\uff9f\017\uff9f\034\uff9f\036\uff9f\045" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\001\002\000\040" +
    "\005\114\012\101\015\071\033\063\041\067\042\051\043" +
    "\057\044\102\046\064\050\053\051\106\052\065\054\075" +
    "\055\074\060\070\001\002\000\022\004\122\016\156\034" +
    "\126\045\123\060\125\061\124\062\127\063\121\001\002" +
    "\000\004\015\uff9d\001\002\000\030\004\uffaf\006\uffaf\016" +
    "\uffaf\017\uffaf\034\126\036\uffaf\045\123\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\001\002\000\030\004\122\006\uffad\016" +
    "\uffad\017\uffad\034\126\036\uffad\045\123\060\125\061\uffad" +
    "\062\127\063\uffad\001\002\000\040\005\114\012\101\015" +
    "\071\033\063\041\067\042\051\043\057\044\102\046\064" +
    "\050\053\051\106\052\065\054\075\055\074\060\070\001" +
    "\002\000\024\004\122\016\uff93\017\uff93\034\126\045\123" +
    "\060\125\061\124\062\127\063\121\001\002\000\030\004" +
    "\uffa0\006\uffa0\016\uffa0\017\uffa0\034\uffa0\036\uffa0\045\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001\002\000\040\005" +
    "\114\012\101\015\071\033\063\041\067\042\051\043\057" +
    "\044\102\046\064\050\053\051\106\052\065\054\075\055" +
    "\074\060\070\001\002\000\022\004\122\006\166\034\126" +
    "\045\123\060\125\061\124\062\127\063\121\001\002\000" +
    "\042\005\114\012\101\015\071\016\uffc9\033\063\041\067" +
    "\042\051\043\057\044\102\046\064\050\053\051\106\052" +
    "\065\054\075\055\074\060\070\001\002\000\004\016\170" +
    "\001\002\000\060\005\uffba\006\uffba\012\uffba\015\uffba\024" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\037\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\050" +
    "\uffba\051\uffba\052\uffba\054\uffba\055\uffba\060\uffba\001\002" +
    "\000\060\005\114\006\047\012\101\015\071\024\054\026" +
    "\104\027\061\030\072\031\056\032\052\033\063\037\042" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\064" +
    "\005\uffb9\006\uffb9\012\uffb9\015\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\060\uffb9\001\002" +
    "\000\004\040\uffc0\001\002\000\004\016\175\001\002\000" +
    "\030\004\uffa5\006\uffa5\016\uffa5\017\uffa5\034\uffa5\036\uffa5" +
    "\045\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000" +
    "\040\005\114\012\101\015\071\033\063\041\067\042\051" +
    "\043\057\044\102\046\064\050\053\051\106\052\065\054" +
    "\075\055\074\060\070\001\002\000\030\004\122\006\uffb5" +
    "\016\uffb5\017\uffb5\034\126\036\uffb5\045\123\060\125\061" +
    "\uffb5\062\127\063\121\001\002\000\064\005\uffd3\006\uffd3" +
    "\012\uffd3\015\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\046\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\054\uffd3\055\uffd3\060\uffd3\001\002\000\004\005\202" +
    "\001\002\000\004\016\203\001\002\000\030\004\uffa8\006" +
    "\uffa8\016\uffa8\017\uffa8\034\uffa8\036\uffa8\045\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\001\002\000\040\005\114\012" +
    "\101\015\071\033\063\041\067\042\051\043\057\044\102" +
    "\046\064\050\053\051\106\052\065\054\075\055\074\060" +
    "\070\001\002\000\022\004\122\017\206\034\126\045\123" +
    "\060\125\061\124\062\127\063\121\001\002\000\014\005" +
    "\022\007\004\010\005\011\006\013\026\001\002\000\006" +
    "\016\210\035\211\001\002\000\030\004\uffa7\006\uffa7\016" +
    "\uffa7\017\uffa7\034\uffa7\036\uffa7\045\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\001\002\000\010\005\uffee\016\uffee\035" +
    "\uffee\001\002\000\004\006\213\001\002\000\064\005\uffb8" +
    "\006\uffb8\012\uffb8\015\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\054\uffb8\055\uffb8\060\uffb8\001\002\000\022" +
    "\004\122\016\215\034\126\045\123\060\125\061\124\062" +
    "\127\063\121\001\002\000\030\004\uffb0\006\uffb0\016\uffb0" +
    "\017\uffb0\034\uffb0\036\uffb0\045\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\030\004\uffaa\006\uffaa\016\uffaa" +
    "\017\uffaa\034\126\036\uffaa\045\123\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\001\002\000\030\004\uffa9\006\uffa9\016\uffa9" +
    "\017\uffa9\034\126\036\uffa9\045\123\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\001\002\000\040\005\uffbe\012\uffbe\015\uffbe" +
    "\033\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\060\uffbe\001\002" +
    "\000\040\005\114\012\101\015\071\033\063\041\067\042" +
    "\051\043\057\044\102\046\064\050\053\051\106\052\065" +
    "\054\075\055\074\060\070\001\002\000\022\004\122\016" +
    "\223\034\126\045\123\060\125\061\124\062\127\063\121" +
    "\001\002\000\060\005\uffbd\006\uffbd\012\uffbd\015\uffbd\024" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\037\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\060\uffbd\001\002" +
    "\000\060\005\114\006\047\012\101\015\071\024\054\026" +
    "\104\027\061\030\072\031\056\032\052\033\063\037\042" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\064" +
    "\005\uffbc\006\uffbc\012\uffbc\015\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\060\uffbc\001\002" +
    "\000\004\016\227\001\002\000\030\004\uffa6\006\uffa6\016" +
    "\uffa6\017\uffa6\034\uffa6\036\uffa6\045\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\001\002\000\064\005\uffb7\006\uffb7\012" +
    "\uffb7\015\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\054\uffb7\055\uffb7\060\uffb7\001\002\000\040\005\uffc7\012" +
    "\uffc7\015\uffc7\033\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\046\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\060" +
    "\uffc7\001\002\000\040\005\114\012\101\015\071\033\063" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\022" +
    "\004\122\016\234\034\126\045\123\060\125\061\124\062" +
    "\127\063\121\001\002\000\060\005\uffc6\006\uffc6\012\uffc6" +
    "\015\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\060" +
    "\uffc6\001\002\000\060\005\114\006\047\012\101\015\071" +
    "\024\054\026\104\027\061\030\072\031\056\032\052\033" +
    "\063\037\042\041\067\042\051\043\057\044\102\046\064" +
    "\050\053\051\106\052\065\054\075\055\074\060\070\001" +
    "\002\000\064\005\uffc3\006\uffc3\012\uffc3\015\uffc3\024\uffc3" +
    "\025\240\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\046\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\060" +
    "\uffc3\001\002\000\064\005\uffc5\006\uffc5\012\uffc5\015\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\060\uffc5\001\002\000\060\005\114\006\047\012\101" +
    "\015\071\024\054\026\104\027\061\030\072\031\056\032" +
    "\052\033\063\037\042\041\067\042\051\043\057\044\102" +
    "\046\064\050\053\051\106\052\065\054\075\055\074\060" +
    "\070\001\002\000\064\005\uffc4\006\uffc4\012\uffc4\015\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055" +
    "\uffc4\060\uffc4\001\002\000\040\005\114\012\101\015\071" +
    "\033\063\041\067\042\051\043\057\044\102\046\064\050" +
    "\053\051\106\052\065\054\075\055\074\060\070\001\002" +
    "\000\006\016\244\017\161\001\002\000\004\006\245\001" +
    "\002\000\064\005\uffb6\006\uffb6\012\uffb6\015\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\046\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\060" +
    "\uffb6\001\002\000\040\005\114\012\101\015\071\033\063" +
    "\041\067\042\051\043\057\044\102\046\064\050\053\051" +
    "\106\052\065\054\075\055\074\060\070\001\002\000\022" +
    "\004\122\016\250\034\126\045\123\060\125\061\124\062" +
    "\127\063\121\001\002\000\030\004\uffa4\006\uffa4\016\uffa4" +
    "\017\uffa4\034\uffa4\036\uffa4\045\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\001\002\000\112\002\uffc8\003\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\060\uffc8\064" +
    "\uffc8\001\002\000\010\006\ufff5\016\ufff5\017\ufff5\001\002" +
    "\000\110\002\ufff6\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\054" +
    "\ufff6\055\ufff6\060\ufff6\064\ufff6\001\002\000\032\002\ufffb" +
    "\003\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014" +
    "\ufffb\020\ufffb\023\ufffb\047\ufffb\064\ufffb\001\002\000\032" +
    "\002\ufffa\003\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\020\ufffa\023\ufffa\047\ufffa\064\ufffa\001\002" +
    "\000\006\005\257\035\211\001\002\000\010\006\ufff4\016" +
    "\ufff4\017\ufff4\001\002\000\004\002\001\001\002\000\032" +
    "\002\000\003\020\005\022\007\004\010\005\011\006\013" +
    "\026\014\024\020\012\023\007\047\010\064\016\001\002" +
    "\000\032\002\ufff8\003\ufff8\005\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\013\ufff8\014\ufff8\020\ufff8\023\ufff8\047\ufff8\064\ufff8" +
    "\001\002\000\010\021\uffe5\022\uffe5\037\uffe5\001\002\000" +
    "\010\021\266\022\uffe0\037\uffe0\001\002\000\006\022\270" +
    "\037\uffde\001\002\000\004\005\267\001\002\000\006\022" +
    "\uffe1\037\uffe1\001\002\000\004\005\301\001\002\000\004" +
    "\037\272\001\002\000\022\005\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\040\uffe2\064\uffe2\001\002\000\022" +
    "\005\022\007\004\010\005\011\006\013\026\014\024\040" +
    "\276\064\016\001\002\000\022\005\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\013\uffdb\014\uffdb\040\uffdb\064\uffdb\001\002\000" +
    "\022\005\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\040\uffe3\064\uffe3\001\002\000\032\002\uffe4\003\uffe4\005" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\020\uffe4" +
    "\023\uffe4\047\uffe4\064\uffe4\001\002\000\022\005\uffda\007" +
    "\uffda\010\uffda\011\uffda\013\uffda\014\uffda\040\uffda\064\uffda" +
    "\001\002\000\006\017\302\037\uffdf\001\002\000\006\017" +
    "\uffdd\037\uffdd\001\002\000\004\005\303\001\002\000\006" +
    "\017\uffdc\037\uffdc\001\002\000\006\006\ufff5\015\uffed\001" +
    "\002\000\004\015\306\001\002\000\020\005\022\007\004" +
    "\010\005\011\006\013\026\016\uffe8\064\016\001\002\000" +
    "\004\016\310\001\002\000\004\037\042\001\002\000\034" +
    "\002\uffec\003\uffec\005\uffec\007\uffec\010\uffec\011\uffec\013" +
    "\uffec\014\uffec\020\uffec\023\uffec\040\uffec\047\uffec\064\uffec" +
    "\001\002\000\032\002\ufff9\003\ufff9\005\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\020\ufff9\023\ufff9\047\ufff9" +
    "\064\ufff9\001\002\000\004\037\uffd9\001\002\000\004\037" +
    "\315\001\002\000\020\005\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\040\uffd6\001\002\000\020\005\022\007" +
    "\004\010\005\011\006\013\026\014\317\040\321\001\002" +
    "\000\004\005\330\001\002\000\006\005\323\035\211\001" +
    "\002\000\032\002\uffd8\003\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\013\uffd8\014\uffd8\020\uffd8\023\uffd8\047\uffd8\064" +
    "\uffd8\001\002\000\020\005\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\040\uffd7\001\002\000\004\015\324\001" +
    "\002\000\020\005\022\007\004\010\005\011\006\013\026" +
    "\016\uffe8\064\016\001\002\000\004\016\326\001\002\000" +
    "\004\006\327\001\002\000\020\005\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\013\uffd5\014\uffd5\040\uffd5\001\002\000\004\015" +
    "\331\001\002\000\020\005\022\007\004\010\005\011\006" +
    "\013\026\016\uffe8\064\016\001\002\000\004\016\333\001" +
    "\002\000\004\006\334\001\002\000\020\005\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\013\uffd4\014\uffd4\040\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\022\002\014\003\013\004\024\005\022\006" +
    "\016\007\020\010\010\013\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\260\001\001\000\002\001\001\000" +
    "\004\010\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\027\001\001\000\002\001\001\000\012\007\031\010" +
    "\032\011\033\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\036\010\032\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\004\031\042\001\001\000" +
    "\042\004\077\007\020\010\032\012\065\020\102\021\075" +
    "\022\072\023\061\024\047\025\106\026\043\027\054\032" +
    "\044\035\076\036\045\037\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\216\035\076" +
    "\036\045\037\104\001\001\000\012\021\215\035\076\036" +
    "\045\037\104\001\001\000\012\021\213\035\076\036\045" +
    "\037\104\001\001\000\014\021\112\033\211\035\076\036" +
    "\045\037\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\065\020\102\021\075\022\072\023\061\024\047\025" +
    "\106\026\043\027\054\032\172\035\076\036\045\037\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\110\001\001\000\014" +
    "\021\112\033\111\035\076\036\045\037\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\117\035\076\036\045\037\104\040\115\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\157\035\076\036\045\037\104\001\001\000" +
    "\012\021\156\035\076\036\045\037\104\001\001\000\004" +
    "\041\136\001\001\000\012\021\133\035\076\036\045\037" +
    "\104\001\001\000\012\021\132\035\076\036\045\037\104" +
    "\001\001\000\012\021\130\035\076\036\045\037\104\001" +
    "\001\000\012\021\127\035\076\036\045\037\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\141\035\076\036\045\037\104\001\001\000\002\001\001" +
    "\000\012\021\143\035\076\036\045\037\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\117\035\076" +
    "\036\045\037\104\040\146\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\117\035\076\036\045" +
    "\037\104\040\151\047\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\154\035\076\036\045\037\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\161\035\076\036\045" +
    "\037\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\164\035\076\036\045\037\104\001\001\000\002" +
    "\001\001\000\014\021\112\033\166\035\076\036\045\037" +
    "\104\001\001\000\002\001\001\000\004\061\170\001\001" +
    "\000\032\012\065\020\171\021\075\022\072\023\061\024" +
    "\047\025\106\026\043\027\054\035\076\036\045\037\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\176\035\076\036\045" +
    "\037\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\204\035\076\036\045\037\104\001\001\000\002\001" +
    "\001\000\004\010\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\220\001\001\000\012\021" +
    "\221\035\076\036\045\037\104\001\001\000\002\001\001" +
    "\000\004\057\223\001\001\000\032\012\065\020\224\021" +
    "\075\022\072\023\061\024\047\025\106\026\043\027\054" +
    "\035\076\036\045\037\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\231\001\001\000\012\021\232\035\076\036\045\037" +
    "\104\001\001\000\002\001\001\000\004\055\234\001\001" +
    "\000\032\012\065\020\235\021\075\022\072\023\061\024" +
    "\047\025\106\026\043\027\054\035\076\036\045\037\104" +
    "\001\001\000\004\034\236\001\001\000\002\001\001\000" +
    "\032\012\065\020\240\021\075\022\072\023\061\024\047" +
    "\025\106\026\043\027\054\035\076\036\045\037\104\001" +
    "\001\000\002\001\001\000\014\021\117\035\076\036\045" +
    "\037\104\047\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\246\035\076\036\045" +
    "\037\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\261\004\024\005\022" +
    "\006\016\007\020\010\010\013\012\001\001\000\002\001" +
    "\001\000\004\052\263\001\001\000\004\015\264\001\001" +
    "\000\004\016\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\277\001\001\000\002\001\001\000\004" +
    "\030\272\001\001\000\014\004\273\005\276\007\020\010" +
    "\010\014\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\304\001\001\000\002\001\001\000\012\007\031\010" +
    "\032\011\306\045\034\001\001\000\002\001\001\000\004" +
    "\012\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\313\001\001\000\002\001\001\000\004\043\315" +
    "\001\001\000\006\010\317\017\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\031\010\032\011\324\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\031\010\032\011" +
    "\331\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    private boolean error = false;
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" Sintactico, simbolo   "+s.value.toString()+"   no esperado.");
            if (s.left >= 0) {
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);
        AnalizadorSintacticoInterfaz.getAnalizador().setError(m.toString());
        AnalizadorSintacticoInterfaz.getAnalizador().error = true;
        System.err.println(m);
        error = true;


    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("UFA2");
    }

    public void analizarSintacticamente(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            if(!AnalizadorSintacticoInterfaz.getAnalizador().error){
              AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            }

            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }



    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));

            Object result = asin.parse().value;
            AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprList ::= ExprList COMA Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprList",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprList",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Constant ::= NULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Constant ::= TEXTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Constant ::= BOOLCONST 
            {
              Object RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = bo;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Constant ::= DECIMAL 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= decimal;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Constant ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = entero;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Actuals ::= ExprList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LibCall ::= SET_BYTES PAR_A Expr COMA Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LibCall ::= OBTENER_BYTES PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Call ::= Expr PUNTO LibCall PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Call ::= Expr PUNTO IDENTIFICADOR PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Call ::= IDENTIFICADOR PAR_A Actuals PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LValue ::= Expr CORCH_A Expr CORCH_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LValue ::= Expr PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		/*RESULT = ex.toString()+"."+id.toString();*/
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LValue ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = id.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= M_OC PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LEER_LIN PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= LEER_EN PAR_A PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= NUEVO_A PAR_A Expr COMA Tipo PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= NUEVO PAR_A IDENTIFICADOR PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= NEGACION Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= MENOS Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr IGUAL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr MENOS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr OPERADORESL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr OPERADORESC Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr OPERADORESA Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= PAR_A Expr PAR_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Call 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = c.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= ESTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= LValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT = id.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Constant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= LValue IGUAL Expr 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PrintStmt ::= IMPRIMIR PAR_A ExprList PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BreakStmt ::= ROMPE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ReturnStmt ::= RETORNA ExprRepetir PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ForStmt ::= PARA PAR_A NT$8 ExprRepetir PUNTOYCOMA Expr PUNTOYCOMA ExprRepetir PAR_C NT$9 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

      TablaDeSimbolos.getTabla().removerTemporales();
      TablaDeSimbolos.getTabla().reducirAmbito();
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              Object RESULT =null;
TablaDeSimbolos.getTabla().aumentarAmbito();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileStmt ::= MIENTRAS PAR_A NT$6 Expr PAR_C NT$7 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

      TablaDeSimbolos.getTabla().removerTemporales();
      TablaDeSimbolos.getTabla().reducirAmbito();
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              Object RESULT =null;
TablaDeSimbolos.getTabla().aumentarAmbito();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SmtmRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SmtmRepetir",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SmtmRepetir ::= Stmt SmtmRepetir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SmtmRepetir",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VariableDeclRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclRepetir",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VariableDeclRepetir ::= VariableDeclRepetir VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclRepetir",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElseRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ElseRepetir",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ElseRepetir ::= SINO Stmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ElseRepetir",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfStmt ::= SI PAR_A NT$4 Expr PAR_C NT$5 Stmt ElseRepetir 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

      TablaDeSimbolos.getTabla().removerTemporales();
      TablaDeSimbolos.getTabla().reducirAmbito();
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$4 ::= 
            {
              Object RESULT =null;
TablaDeSimbolos.getTabla().aumentarAmbito();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StmtBlock ::= LL_A VariableDeclRepetir SmtmRepetir LL_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprRepetir ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprRepetir",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprRepetir ::= Expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ExprRepetir",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= Expr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Stmt",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= VD IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= Tipo IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Prototype",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ReptPrototype ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReptPrototype",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ReptPrototype ::= ReptPrototype Prototype 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ReptPrototype",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceDecl ::= INTERFAZ IDENTIFICADOR NT$3 LL_A ReptPrototype LL_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int interfazleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int interfazright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object interfaz = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setClaseActual("");
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =null;
		int interfazleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int interfazright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object interfaz = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(interfaz.toString(),"","interfaz")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setClaseActual(interfaz.toString());
      }
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Field",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IDList ::= IDList COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDList",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IDList ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IDList",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Implementar ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Implementar",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Implementar ::= IMPLEMENTA IDList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Implementar",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Herencias ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Herencias",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Herencias ::= HERENCIA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Herencias",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RepetirField ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepetirField",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RepetirField ::= RepetirField Field 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RepetirField",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASE IDENTIFICADOR NT$2 Herencias Implementar LL_A RepetirField LL_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setClaseActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(clase.toString(),"","clase")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setClaseActual(clase.toString());
      }
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VariableList ::= VariableList COMA Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableList",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableList ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableList",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Formals ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= VariableList 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Formals",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= VD IDENTIFICADOR NT$1 PAR_A Formals PAR_C StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().removerTemporales();
        TablaDeSimbolos.getTabla().reducirAmbito();
        TablaDeSimbolos.getTabla().setFuncionActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

      if (TablaDeSimbolos.getTabla().insertarEnTabla(funcion.toString(),"void","funcion")) {
        TablaDeSimbolos.getTabla().aumentarAmbito();
        TablaDeSimbolos.getTabla().setFuncionActual(funcion.toString());
      }
      
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= Tipo IDENTIFICADOR NT$0 PAR_A Formals PAR_C StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
     TablaDeSimbolos.getTabla().removerTemporales();
     TablaDeSimbolos.getTabla().reducirAmbito();
     TablaDeSimbolos.getTabla().setFuncionActual("");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;

        if (TablaDeSimbolos.getTabla().insertarEnTabla(funcion.toString(),tipo.toString(),"funcion")) {
          TablaDeSimbolos.getTabla().aumentarAmbito();
          TablaDeSimbolos.getTabla().setFuncionActual(funcion.toString());
        }
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= Tipo CORCH 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= TDS 
            {
              Object RESULT =null;
		 RESULT = "cadena"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= TDB 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= TDD 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= TDE 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= CONSTANTE Tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().insertarEnTabla(id.toString(),tipo.toString(),"constante");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        TablaDeSimbolos.getTabla().insertarEnTabla(id.toString(),tipo.toString(),"variable");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDecl ::= Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclRep ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclRep",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclRep ::= DeclRep Decl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DeclRep",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= INCLUDES ARCHIVO 
            {
              Object RESULT =null;
		int archleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int archright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object arch = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
               String archivo;
               archivo = arch.toString().replace('<',' ');
               archivo = archivo.toString().replace('>',' ');
               archivo = archivo.trim();
               archivo = "C:\\Users\\JMansilla\\Documents\\"+archivo;
               //TablaDeSimbolos.getTabla().analizadorSintact(archivo);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error LL_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Decl DeclRep 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

