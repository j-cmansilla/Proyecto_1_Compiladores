

/* ---------------Seccion de declaraciones preliminares--------------------*/
package analizadores;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;

/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:

    /* Reporte de error encontrado. */
    private boolean error = false;
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" Sintactico, simbolo '"+s.value.toString()+"' no esperado.");
            if (s.left >= 0) {
                m.append(" en la lÃ­nea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);
        AnalizadorSintacticoInterfaz.getAnalizador().setError(m.toString());
        AnalizadorSintacticoInterfaz.getAnalizador().error = true;
        System.err.println(m);
        error = true;


    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("UFA2");
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion.
    public void report_fatal_error(String message, Object info) {
        error = true;
        /*AnalizadorSintacticoInterfaz.getAnalizador().error = true;
        AnalizadorSintacticoInterfaz.getAnalizador().setError("> "+message);
        report_error(message, info);

        //System.exit(1);
    }*/

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */

    public void analizarSintacticamente(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            if(!AnalizadorSintacticoInterfaz.getAnalizador().error){
              AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            }

            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }

    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));

            Object result = asin.parse().value;
            AnalizadorSintacticoInterfaz.getAnalizador().setError("> Archivo correctamente analizado! No contiene errores!");
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {

        }
    }
:};



/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* Terminales (tokens obtenidos por el analizador lexico). */

terminal          OPERADORESA,IDENTIFICADOR,PUNTOYCOMA,TDE,TDD,TDB,BOOLCONST,TDS,CORCH,VD,PAR_A,PAR_C,COMA,CLASE,HERENCIA,IMPLEMENTA,INTERFAZ,
                  SI, SINO,PARA,MIENTRAS,RETORNA,ROMPE,IMPRIMIR,ESTO,PARENTESIS,CORCH_A,CORCH_C,LL_A,LL_C,NEGACION,M_OC,LEER_EN,
                  LEER_LIN,PUNTO,DECIMAL,ENTERO,TEXTO,NULO,NUEVO,NUEVO_A,OBTENER_BYTES,SET_BYTES,MENOS,IGUAL,OPERADORESC,OPERADORESL;

/* No terminales usados en la seccion gramatical. */
non terminal Object     Programa, Decl, VariableDecl,FunctionDecl,InterfaceDecl,Variable,Tipo,Formals,StmtBlock,ClassDecl,Field,
                        Herencias,Implementar,Prototype,Stmt,Expr,IfStmt,WhileStmt,ForStmt,BreakStmt,ReturnStmt,PrintStmt,RepetirField,
                        VariableDeclRepetir,SmtmRepetir,ExprRepetir,ElseRepetir,LValue,Constant,Call,Actuals,LibCall,DeclRep,
                        ReptPrototype,VariableList,IDList,ExprList;


precedence left IGUAL;
precedence left OPERADORESA;
precedence left OPERADORESC;
precedence left OPERADORESL;
precedence left NEGACION, MENOS;
precedence left CORCH_A,PUNTO;
precedence left PAR_A;
precedence left SINO;
precedence left IDENTIFICADOR;


start with Programa;
//GRAMATICA
    Programa ::= Decl DeclRep
    ;

    Decl ::= VariableDecl|
             FunctionDecl|
             ClassDecl|
             InterfaceDecl|
             error PUNTOYCOMA|
             error LL_C
    ;
    DeclRep ::= Decl DeclRep|
    ;

    VariableDecl ::= Variable PUNTOYCOMA
    ;
    Variable ::= Tipo IDENTIFICADOR
    ;

    Tipo ::= TDE|
             TDD|
             TDB|
             TDS|
             IDENTIFICADOR|
             Tipo CORCH
    ;

    FunctionDecl ::= Tipo IDENTIFICADOR PAR_A Formals PAR_C StmtBlock| VD IDENTIFICADOR PAR_A Formals PAR_C StmtBlock
    ;

    Formals ::= VariableList|
    ;


    VariableList ::= Variable|VariableList COMA Variable
    ;



    ClassDecl ::= CLASE IDENTIFICADOR Herencias Implementar LL_A RepetirField LL_C
    ;

    RepetirField ::= Field RepetirField|
    ;

    Herencias ::= HERENCIA IDENTIFICADOR|
    ;

    Implementar ::= IMPLEMENTA IDList|
    ;

    IDList ::= IDENTIFICADOR| IDList COMA IDENTIFICADOR
    ;

    Field::= VariableDecl|
             FunctionDecl
    ;

    InterfaceDecl ::= INTERFAZ IDENTIFICADOR LL_A ReptPrototype LL_C
    ;

    ReptPrototype ::= Prototype ReptPrototype|
    ;

    Prototype ::= Tipo IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA|
                  VD IDENTIFICADOR PAR_A Formals PAR_C PUNTOYCOMA
    ;

    Stmt ::= Expr PUNTOYCOMA|
                    PUNTOYCOMA|
                    IfStmt|
                    WhileStmt|
                    ForStmt|
                    BreakStmt|
                    ReturnStmt|
                    PrintStmt|
                    StmtBlock
    ;

    ExprRepetir ::= Expr|
    ;
    StmtBlock ::= LL_A VariableDeclRepetir SmtmRepetir LL_C
    ;
    IfStmt ::= SI PAR_A Expr PAR_C Stmt ElseRepetir
    ;
    ElseRepetir ::= SINO Stmt|
    ;
    VariableDeclRepetir ::= VariableDecl VariableDeclRepetir|
    ;
    SmtmRepetir ::= Stmt SmtmRepetir|
    ;
    WhileStmt ::= MIENTRAS PAR_A Expr PAR_C Stmt
    ;
    ForStmt ::= PARA PAR_A ExprRepetir PUNTOYCOMA Expr PUNTOYCOMA ExprRepetir PAR_C Stmt
    ;
    ReturnStmt ::= RETORNA ExprRepetir PUNTOYCOMA
    ;
    BreakStmt ::= ROMPE PUNTOYCOMA
    ;
    PrintStmt ::= IMPRIMIR PAR_A ExprList PAR_C PUNTOYCOMA
    ;

    Expr ::= LValue IGUAL Expr|
             Constant|
             LValue|
             ESTO|
             Call|
             PAR_A Expr PAR_C|
             Expr OPERADORESA Expr|
             Expr OPERADORESC Expr|
             Expr OPERADORESL Expr|
             Expr MENOS Expr|
             Expr IGUAL Expr|
             MENOS Expr|
             NEGACION Expr|
             NUEVO PAR_A IDENTIFICADOR PAR_C|
             NUEVO_A PAR_A Expr COMA Tipo PAR_C|
             LEER_EN PARENTESIS|
             LEER_LIN PARENTESIS|
             M_OC PAR_A Expr PAR_C
    ;

    LValue ::= IDENTIFICADOR|
               Expr PUNTO IDENTIFICADOR|
               Expr CORCH_A Expr CORCH_C
    ;

    Call ::= IDENTIFICADOR PAR_A Actuals PAR_C|
             Expr PUNTO IDENTIFICADOR PAR_A Actuals PAR_C|
             Expr PUNTO LibCall PAR_A Actuals PAR_C
    ;

    LibCall ::= OBTENER_BYTES PAR_A Expr PAR_C|
                SET_BYTES PAR_A Expr COMA Expr PAR_C
    ;

    Actuals ::= ExprList|
    ;

    Constant ::= ENTERO|
                 DECIMAL|
                 BOOLCONST|
                 TEXTO|
                 NULO
    ;

    ExprList ::= Expr|ExprList COMA Expr
    ;
